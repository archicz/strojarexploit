#ifndef STROJARBITBUFFER_H
#define STROJARBITBUFFER_H
#pragma once

/*
#---------------------------------------------------------------------
|	Strojar Bitbuffer Class (a bitstrema)
|	Partyzan Technology (C) 2020
|   Copyright Valve Corporation, All rights reserved.
#---------------------------------------------------------------------
*/

typedef unsigned char uint8;
typedef signed char int8;

typedef unsigned short uint16;
typedef signed short int16;

typedef unsigned int uint32;
typedef signed int int32;

typedef unsigned long long uint64;
typedef signed long long int64;

typedef unsigned long uintp;
inline int GetBitForBitnum(int bitNum)
{
	static int bitsForBitnum[] =
	{
		(1 << 0),
		(1 << 1),
		(1 << 2),
		(1 << 3),
		(1 << 4),
		(1 << 5),
		(1 << 6),
		(1 << 7),
		(1 << 8),
		(1 << 9),
		(1 << 10),
		(1 << 11),
		(1 << 12),
		(1 << 13),
		(1 << 14),
		(1 << 15),
		(1 << 16),
		(1 << 17),
		(1 << 18),
		(1 << 19),
		(1 << 20),
		(1 << 21),
		(1 << 22),
		(1 << 23),
		(1 << 24),
		(1 << 25),
		(1 << 26),
		(1 << 27),
		(1 << 28),
		(1 << 29),
		(1 << 30),
		(1 << 31),
	};

	return bitsForBitnum[(bitNum) & (32 - 1)];
}

#define Bits2Bytes(b) ((b+7) >> 3)
#define Bytes2Bits(b) (b << 3)

class StrojarBitbuffer
{
public:
	StrojarBitbuffer();
	StrojarBitbuffer(void* pData, uint32 nBytes, int32 nMaxBits = -1);

	uint32 GetNumBitsLeft();
	uint32 GetNumBytesLeft();

	uint32 GetNumBitsProcessed();
	uint32 GetNumBytesProcessed();

	void Reset();
	void Seek(uint32 bitpos);
	void SeekRelative(uint32 bitpos);
public: // write functions
	void WriteOneBit(uint8 bit);

	void WriteUBitLong(uint32 data, uint32 numbits);
	void WriteSBitLong(int32 data, uint32 numbits);
	void WriteVarInt32(uint32 data);

	bool WriteBits(void* pIn, uint32 nBits);
	bool WriteBytes(void* pIn, uint32 nBytes);

	void WriteChar(char val);
	void WriteByte(uint8 val);
	void WriteShort(int16 val);
	void WriteWord(uint16 val);
	void WriteLong(int32 val);
	void WriteUnsignedLong(uint32 val);

	bool WriteString(const char* pStr);
public: // read functions
	uint8 ReadOneBit();

	uint32 ReadUBitLong(uint32 numbits);
	int32 ReadSBitLong(uint32 numbits);
	uint32 ReadVarInt32();

	void ReadBits(void* pOut, uint32 nBits);
	void ReadBytes(void* pOut, uint32 nBytes);

	char ReadChar();
	uint8 ReadByte();
	int16 ReadShort();
	uint16 ReadWord();
	int32 ReadLong();
	uint32 ReadUnsignedLong();

	bool ReadString(char* pStr, uint32 bufLen);
public:
	uintp * __restrict m_pData;
	uint32 m_nDataBytes;
	uint32 m_nDataBits;
	uint32 m_nCurBit;
};

#endif